let o = null, r = null;
async function w(n) {
  try {
    o = new WebTorrent(), n.textContent = "Ready to play";
  } catch (s) {
    throw s;
  }
}
async function p(n, s, f) {
  try {
    o || (o = new WebTorrent()), r && r.destroy();
    const c = document.querySelector(s);
    c.innerHTML = "";
    const e = document.createElement("video");
    e.controls = !0, e.style.width = "100%", e.style.height = "100%", e.style.backgroundColor = "#000", c.appendChild(e), r = o.add(f, {
      announce: [
        "wss://tracker.btorrent.xyz",
        "wss://tracker.openwebtorrent.com",
        "wss://tracker.fastcast.nz"
      ]
    }, (a) => {
      const l = a.files.find((t) => /\.(mp4|mkv|webm)$/i.test(t.name));
      if (!l)
        throw new Error("No video file found");
      l.getBlobURL((t, d) => {
        if (!t && d) {
          e.src = d;
          const y = e.play();
          y && y.catch(() => {
            e.addEventListener("click", () => {
              e.play();
            });
          });
        }
      });
      let i = 0;
      a.on("download", () => {
        const t = Math.floor(a.progress * 100);
        t > i && (i = t, n.textContent = `Downloading: ${t}%`), e.paused && a.progress > 5e-3 && e.play().catch(() => {
        });
      }), a.on("done", () => {
        n.textContent = "Download complete", e.paused && e.play().catch(console.error);
      });
    });
  } catch (c) {
    throw c;
  }
}
async function u() {
  r && (r.destroy(), r = null), o && await new Promise((n) => {
    o.destroy(() => {
      o = new WebTorrent(), n();
    });
  });
}
export {
  w as initTorrentPlayer,
  p as startDownload,
  u as stopDownload
};
