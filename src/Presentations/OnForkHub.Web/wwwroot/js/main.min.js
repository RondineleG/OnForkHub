let o = null, e = null;
async function w(r) {
  try {
    o = new WebTorrent(), r.textContent = "Ready to play";
  } catch (d) {
    throw d;
  }
}
async function y(r, d, l) {
  try {
    o || (o = new WebTorrent()), e && (e.destroy(), e = null);
    const t = document.querySelector(d);
    t.innerHTML = `
            <video controls style="width:100%; height:100%; background-color: #000;">
                Your browser does not support video playback.
            </video>
        `;
    const a = t.querySelector("video");
    o.add(l, (c) => {
      const s = c.files.find((n) => /\.(mp4|mkv|webm)$/i.test(n.name));
      if (!s)
        throw new Error("No video file found");
      const u = s.createReadStream(), i = new MediaSource();
      a.src = URL.createObjectURL(i), i.addEventListener("sourceopen", () => {
        const n = i.addSourceBuffer('video/mp4; codecs="avc1.42E01E, mp4a.40.2"');
        u.on("data", (f) => {
          if (!n.updating)
            try {
              n.appendBuffer(f);
            } catch (p) {
              console.warn("Error appending buffer:", p);
            }
        });
      }), a.play().catch(console.error), c.on("download", () => {
        const n = Math.floor(c.progress * 100);
        r.textContent = `Downloading: ${n}%`, a.paused && a.play().catch(() => {
        });
      }), c.on("done", () => {
        r.textContent = "Download complete";
      }), e = c;
    });
  } catch (t) {
    throw console.error("Error in startDownload:", t), t;
  }
}
async function h() {
  e && (e.destroy(), e = null), o && await new Promise((r) => {
    o.destroy(() => {
      o = new WebTorrent(), r();
    });
  });
}
export {
  w as initTorrentPlayer,
  y as startDownload,
  h as stopDownload
};
