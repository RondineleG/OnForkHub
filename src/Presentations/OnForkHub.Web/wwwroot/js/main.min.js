let t = null, o = null;
async function w(e) {
  try {
    t = new WebTorrent(), e.textContent = "Ready to play";
  } catch (i) {
    throw i;
  }
}
async function y(e, i, s) {
  try {
    t || (t = new WebTorrent()), o && (o.destroy(), o = null);
    const r = document.querySelector(i);
    r.innerHTML = `
            <video controls playsinline style="width:100%; height:100%; background:#000;"></video>
        `;
    const c = r.querySelector("video");
    if (!c) throw new Error("Video element not found");
    t.add(s, (l) => {
      l.files.filter((n) => /\.(mp4|mkv|webm)$/i.test(n.name)).reduce((n, d) => n.length > d.length ? n : d).renderTo(c, {
        autoplay: !0,
        controls: !0,
        muted: !1
      }), l.on("download", () => {
        const n = Math.floor(l.progress * 100);
        e.textContent = `Downloading: ${n}%`;
      }), l.on("done", () => {
        e.textContent = "Download complete";
      }), o = l;
    });
  } catch (r) {
    throw console.error("Error in startDownload:", r), r;
  }
}
async function f() {
  try {
    o && (o.destroy(), o = null), t && await new Promise((e) => {
      t.destroy(() => {
        t = new WebTorrent(), e();
      });
    });
  } catch (e) {
    throw console.error("Error stopping download:", e), e;
  }
}
export {
  w as initTorrentPlayer,
  y as startDownload,
  f as stopDownload
};
