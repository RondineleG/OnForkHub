let n = null, e = null;
async function d(r) {
  try {
    n = new WebTorrent(), r.textContent = "Ready to play";
  } catch (c) {
    throw c;
  }
}
async function i(r, c, l) {
  try {
    n || (n = new WebTorrent()), e && e.destroy();
    const a = document.querySelector(c);
    a.innerHTML = "";
    const o = document.createElement("video");
    o.controls = !0, o.autoplay = !0, o.style.width = "100%", o.style.height = "100%", o.style.backgroundColor = "#000", a.appendChild(o), e = n.add(l, {
      announce: [
        "wss://tracker.btorrent.xyz",
        "wss://tracker.openwebtorrent.com",
        "wss://tracker.fastcast.nz"
      ]
    }), e.on("ready", () => {
      const t = e.files.find((s) => /\.(mp4|mkv|webm)$/i.test(s.name));
      if (!t)
        throw new Error("No video file found");
      t.appendTo(o, {
        autoplay: !0,
        muted: !1
      }), o.addEventListener("canplay", () => {
        o.play().catch(console.error);
      });
    }), e.on("download", () => {
      const t = Math.floor(e.progress * 100);
      r.textContent = `Downloading: ${t}%`, o.paused && e.progress > 5e-3 && o.play().catch(() => {
      });
    }), e.on("done", () => {
      r.textContent = "Download complete", o.paused && o.play().catch(console.error);
    }), e.on("error", (t) => {
      throw console.error("Torrent error:", t), t;
    });
  } catch (a) {
    throw console.error("Error in startDownload:", a), a;
  }
}
async function w() {
  try {
    e && (e.destroy(), e = null), n && await new Promise((r) => {
      n.destroy(() => {
        n = new WebTorrent(), r();
      });
    });
  } catch (r) {
    throw console.error("Error stopping download:", r), r;
  }
}
export {
  d as initTorrentPlayer,
  i as startDownload,
  w as stopDownload
};
