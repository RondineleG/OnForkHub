let n = null;
async function u(o) {
  try {
    n = new WebTorrent(), o.textContent = "WebTorrent initialized successfully";
  } catch (i) {
    throw console.error("Error initializing WebTorrent:", i), i;
  }
}
async function f(o, i, c) {
  try {
    n || (n = new WebTorrent());
    const r = document.querySelector(i);
    if (!r) throw new Error("Video container not found");
    const t = document.createElement("video");
    return t.style.width = "100%", t.style.height = "100%", t.style.maxHeight = "480px", t.controls = !0, r.innerHTML = "", r.appendChild(t), new Promise((a, w) => {
      n.add(c, (d) => {
        const s = d.files.filter(
          (e) => e.name.endsWith(".mp4") || e.name.endsWith(".webm") || e.name.endsWith(".mkv")
        ).reduce((e, l) => e.length > l.length ? e : l);
        if (!s) {
          w(new Error("No video file found"));
          return;
        }
        s.renderTo(t), d.on("download", () => {
          const e = (d.progress * 100).toFixed(1);
          o.textContent = `Downloading: ${e}%`;
        }), d.on("done", () => {
          o.textContent = "Download complete", a();
        });
      });
    });
  } catch (r) {
    throw r;
  }
}
async function m() {
  n && await new Promise((o) => {
    n.destroy(() => {
      n = new WebTorrent(), o();
    });
  });
}
export {
  u as initTorrentPlayer,
  f as startDownload,
  m as stopDownload
};
