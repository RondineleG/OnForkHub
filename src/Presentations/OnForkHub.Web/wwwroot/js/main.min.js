let e = null, r = null;
async function w(o) {
  try {
    e = new WebTorrent(), o.textContent = "Ready to play";
  } catch (a) {
    throw a;
  }
}
async function y(o, a, i) {
  try {
    e || (e = new WebTorrent()), r && (r.destroy(), r = null);
    const s = document.querySelector(a);
    s.innerHTML = "";
    let c = !1;
    r = e.add(i, {
      announce: [
        "wss://tracker.btorrent.xyz",
        "wss://tracker.openwebtorrent.com",
        "wss://tracker.fastcast.nz"
      ],
      strategy: "sequential"
    }, (n) => {
      const l = n.files.find((t) => /\.(mp4|mkv|webm)$/i.test(t.name));
      if (!l)
        throw new Error("No video file found");
      l.streamTo({
        container: s,
        autoplay: !0,
        controls: !0,
        muted: !1,
        onReady: (t) => {
          t.style.width = "100%", t.style.height = "100%", t.style.backgroundColor = "#000", c || (c = !0, t.play());
        },
        onError: (t) => {
          console.error("Stream error:", t);
        }
      }), l.select();
    }), r.on("download", () => {
      const n = Math.floor(r.progress * 100);
      o.textContent = `Downloading: ${n}%`;
    }), r.on("error", (n) => {
      throw console.error("Torrent error:", n), n;
    });
  } catch (s) {
    throw console.error("Error in startDownload:", s), s;
  }
}
async function d() {
  try {
    r && (r.destroy(), r = null), e && await new Promise((o) => {
      e.destroy(() => {
        e = new WebTorrent(), o();
      });
    });
  } catch (o) {
    throw console.error("Error stopping download:", o), o;
  }
}
export {
  w as initTorrentPlayer,
  y as startDownload,
  d as stopDownload
};
