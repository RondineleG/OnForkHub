@page "/"
@inject IJSRuntime JS
@implements IAsyncDisposable

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-10">
            <div class="card shadow-sm">
                <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center">
                    <h3 class="mb-0 fs-4">Torrent Video Player</h3>
                    <small class="text-muted">Loading may take a few minutes</small>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(error))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <strong>Error:</strong> @error
                            <button type="button" class="btn-close" @onclick="() => error = null"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(status))
                    {
                        <div class="alert alert-info">
                            <strong>Status:</strong> @status
                        </div>
                    }

                    <div class="mb-4">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bi bi-magnet"></i>
                            </span>
                            <input type="text" 
                                   class="form-control" 
                                   placeholder="Enter magnet URI or use default" 
                                   @bind="customMagnetUri"
                                   @bind:event="oninput" />
                            <button class="btn btn-outline-secondary" 
                                    type="button"
                                    @onclick="UseDefaultUri">
                                Use Default
                            </button>
                        </div>
                        <small class="text-muted">Leave empty to use the default Sintel movie torrent</small>
                    </div>

                    <div class="video-wrapper mb-4">
                        <div id="videoContainer" class="ratio ratio-16x9 bg-dark rounded">
                            @if (!isPlaying)
                            {
                                <div class="video-placeholder d-flex align-items-center justify-content-center">
                                    <div class="text-center text-white">
                                        <i class="bi bi-film fs-1 mb-2"></i>
                                        <p>Video will appear here</p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="progress-container mb-4">
                        <h6 class="mb-2">Download Progress</h6>
                        <div @ref="progressElement" class="alert alert-secondary mb-0">
                            @if (!isInitialized)
                            {
                                <div class="d-flex align-items-center">
                                    <div class="spinner-border spinner-border-sm me-2" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <span>Initializing WebTorrent...</span>
                                </div>
                            }
                            else
                            {
                                <span>Ready to start</span>
                            }
                        </div>
                    </div>

                    <div class="d-flex gap-2 justify-content-center">
                        <button class="btn btn-primary" 
                                @onclick="StartPlayback" 
                                disabled="@(!isInitialized || isPlaying)">
                            <i class="bi bi-play-fill me-1"></i>
                            @(isPlaying ? "Playing..." : "Play Video")
                        </button>
                        <button class="btn btn-danger" 
                                @onclick="StopPlayback" 
                                disabled="@(!isInitialized || !isPlaying)">
                            <i class="bi bi-stop-fill me-1"></i>
                            Stop
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .video-wrapper {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .video-placeholder {
        background: linear-gradient(45deg, #1a1a1a, #2d2d2d);
        height: 100%;
    }

    #videoContainer {
        min-height: 400px;
    }

    #videoContainer video {
        width: 100%;
        height: 100%;
        object-fit: contain;
        background: #000;
    }

    .progress-container {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 1rem;
    }

    .btn {
        min-width: 120px;
    }

    .card-header {
        border-bottom: 2px solid #0d6efd;
    }

    @media (max-width: 768px) {
        #videoContainer {
            min-height: 300px;
        }
    }
</style>

@code {
    private IJSObjectReference? module;
    private ElementReference progressElement;
    private string? error;
    private string? status;
    private bool isInitialized;
    private bool isPlaying;
    private string? customMagnetUri;
    
    private readonly string defaultMagnetUri = "magnet:?xt=urn:btih:08ada5a7a6183aae1e09d831df6748d566095a10&dn=Sintel&tr=udp%3A%2F%2Fexplodie.org%3A6969&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.empire-js.us%3A1337&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337&tr=wss%3A%2F%2Ftracker.btorrent.xyz&tr=wss%3A%2F%2Ftracker.fastcast.nz&tr=wss%3A%2F%2Ftracker.openwebtorrent.com&ws=https%3A%2F%2Fwebtorrent.io%2Ftorrents%2F&xs=https%3A%2F%2Fwebtorrent.io%2Ftorrents%2Fsintel.torrent";

    private string CurrentMagnetUri => !string.IsNullOrWhiteSpace(customMagnetUri) ? customMagnetUri : defaultMagnetUri;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                status = "Loading WebTorrent...";
                await InvokeAsync(StateHasChanged);

                module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/main.min.js");
                await module.InvokeVoidAsync("initTorrentPlayer", progressElement);

                isInitialized = true;
                status = "WebTorrent loaded successfully";
                error = null;
            }
            catch (Exception ex)
            {
                error = $"Error initializing player: {ex.Message}";
                status = null;
                Console.WriteLine($"Error initializing player: {ex}");
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private void UseDefaultUri()
    {
        customMagnetUri = defaultMagnetUri;
    }

    private async Task StartPlayback()
    {
        if (module != null && !isPlaying)
        {
            isPlaying = true;
            try
            {
                status = "Starting download...";
                await InvokeAsync(StateHasChanged);

                await module.InvokeVoidAsync(
                    "startDownload",
                    progressElement,
                    "#videoContainer",
                    CurrentMagnetUri
                );

                error = null;
                status = null;
            }
            catch (Exception ex)
            {
                error = $"Error starting download: {ex.Message}";
                status = null;
                isPlaying = false;
            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task StopPlayback()
    {
        if (module != null && isPlaying)
        {
            try
            {
                await module.InvokeVoidAsync("stopDownload");
                error = null;
                status = "Download stopped";
                isPlaying = false;
            }
            catch (Exception ex)
            {
                error = $"Error stopping download: {ex.Message}";
                status = null;
                Console.WriteLine($"Error stopping download: {ex}");
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}