@page "/test"
@inject IJSRuntime JS
@implements IAsyncDisposable

<h1>Test All Functions</h1>

<div class="mt-4">
    <h3>Counter Test</h3>
    <div @ref="counterElement" class="counter"></div>
</div>

<div class="mt-4">
    <h3>Exemplo Test</h3>
    <div @ref="exemploElement" class="exemplo"></div>
</div>

<div class="mt-4">
    <button class="btn btn-primary" @onclick="TestAll">Test All</button>
</div>

@code {
    private IJSInProcessObjectReference? module;
    private ElementReference counterElement;
    private ElementReference exemploElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                module = await JS.InvokeAsync<IJSInProcessObjectReference>("import", "./js/main.min.js");

                await module.InvokeVoidAsync("Counter", counterElement);
                await module.InvokeVoidAsync("Exemplo", exemploElement);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing: {ex.Message}");
            }
        }
    }

    private async Task TestAll()
    {
        if (module != null)
        {
            try
            {
                await module.InvokeVoidAsync("incrementCounter", counterElement);
                await module.InvokeVoidAsync("incrementExemplo", exemploElement);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error testing: {ex.Message}");
            }
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

}