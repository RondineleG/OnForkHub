@page "/home"
@implements IAsyncDisposable
@inject IJSRuntime JS
@using OnForkHub.Web.Components.VideoPlayer
@using OnForkHub.Web.Components.Models

<div class="shorts-container">
    <div class="main-content">
        <div class="video-container">
            <button class="nav-button prev-button" @onclick="PreviousVideo">
                <i class="bi bi-caret-left-fill"></i>
            </button>

            <div class="video-wrapper">
                @if (nowPlayingVideo != null)
                {
                    <div class="video-info">
                        <h2 class="video-title">@nowPlayingVideo.Title</h2>
                        <div class="video-overlay rounded">Now Playing</div>
                    </div>
                }

                <Player id="shorts-video-player"
                        Sources="@GetCurrentVideoSources()"
                        Tracks="@videoTracks"
                        Poster="@GetCurrentPosterUrl()"
                        OnPlayVideo="HandlePlay"
                        OnEndedVideo="HandleEnded"
                        OnVideoTimeUpdate="HandleTimeUpdate"
                        PlayControl="true"
                        FullscreenControl="true"
                        VolumeControl="true"
                        ProgressControl="true"
                        CurrentTimeControl="true"
                        DurationControl="true"
                        MuteControl="true"
                        SettingsControl="false"
                        CaptionsControl="false"
                        Quality="false"
                        Speed="false"
                        PIPControl="true"
                        class="shorts-video" />
            </div>

            <button class="nav-button next-button" @onclick="NextVideo">
                <i class="bi bi-caret-right-fill"></i>
            </button>
        </div>

        <div class="interaction-buttons">
            <button class="action-btn star-btn">
                <i class="bi bi-star"></i>
            </button>
            <button class="action-btn share-btn">
                <i class="bi bi-share"></i>
            </button>
            @if (currentTime > 0 && duration > 0)
            {
                <div class="time-info">
                    @FormatTime(currentTime) / @FormatTime(duration)
                </div>
                <div class="time-info">
                    @playbackStatus
                </div>
            }
        </div>
    </div>

    <div class="video-list-container">
        <h3 class="playlist-title">Next Videos</h3>
        <div class="video-list">
            @foreach (var item in videos)
            {
                <VideoCard Video="item"
                           OnPlayCallBack="async () => await PlayVideo(item)"
                           NowPlayingVideo="@nowPlayingVideo?.Title" />
            }
        </div>
    </div>
</div>

@code {
    private readonly List<Video> videos = new();
    private Video? nowPlayingVideo;
    private List<Track> videoTracks = new();
    private int currentIndex;
    private float currentTime = 0;
    private float duration = 0;
    private string playbackStatus = "Pronto para reprodução";

    protected override void OnInitialized()
    {
        getMovies();
        nowPlayingVideo = videos.FirstOrDefault();
        setupVideoTracks();
    }

    private void setupVideoTracks()
    {
        videoTracks = new List<Track>();
    }

    private List<Source> GetCurrentVideoSources()
    {
        if (nowPlayingVideo == null) return new List<Source>();

        return new List<Source>
        {
            new Source { Src = $"/Videos/{nowPlayingVideo.Name}", Type = "video/mp4" }
        };
    }

    private string GetCurrentPosterUrl()
    {
        if (nowPlayingVideo == null) return "/images/videoPoster.png";

        return $"/images/{nowPlayingVideo.Thumbnail}";
    }

    private async Task NextVideo()
    {
        currentIndex = (currentIndex + 1) % videos.Count;
        nowPlayingVideo = videos[currentIndex];
        await RefreshPlayer();
    }

    private async Task PreviousVideo()
    {
        currentIndex = (currentIndex - 1 + videos.Count) % videos.Count;
        nowPlayingVideo = videos[currentIndex];
        await RefreshPlayer();
    }

    private async Task PlayVideo(Video video)
    {
        nowPlayingVideo = video;
        currentIndex = videos.IndexOf(video);
        await RefreshPlayer();
    }

    private async Task RefreshPlayer()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandlePlay()
    {
        playbackStatus = "Reproduzindo...";
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleEnded()
    {
        playbackStatus = "Reprodução finalizada";
        await NextVideo();
    }

    private async Task HandleTimeUpdate((float currentTime, float duration) timeInfo)
    {
        currentTime = timeInfo.currentTime;
        duration = timeInfo.duration;
        await InvokeAsync(StateHasChanged);
    }

    private string FormatTime(float seconds)
    {
        var time = TimeSpan.FromSeconds(seconds);
        return time.ToString(@"mm\:ss");
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await Task.CompletedTask;
    }

    private void getMovies()
    {
        videos.Add(new Video { Title = "Skate Bros", Thumbnail = "SkateBros.png", Name = "SkateBros.mp4" });
        videos.Add(new Video { Title = "Before the Storm", Thumbnail = "CalmingWaves.png", Name = "CalmingWaves.mp4" });
        videos.Add(new Video { Title = "Mustang Sally", Thumbnail = "MustangSally.png", Name = "MustangSally.mp4" });
        videos.Add(new Video { Title = "The Sixth Element", Thumbnail = "TheSixthElement.png", Name = "TheSixthElement.mp4" });
        videos.Add(new Video { Title = "Cyber City 2045", Thumbnail = "Cyber2045.png", Name = "Cyber2045.mp4" });
        videos.Add(new Video { Title = "Zero Hour", Thumbnail = "DestinyZeroHour.png", Name = "DestinyZeroHour.mp4" });
    }
}
