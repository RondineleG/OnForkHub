let c = null, s = null, r = null;
function y(e) {
  if (!e || !(e instanceof HTMLElement))
    throw new Error("Element is not an HTMLElement");
}
function v() {
  if (r) {
    try {
      const e = r.src;
      r.pause(), r.src = "", r.load(), e.startsWith("blob:") && URL.revokeObjectURL(e);
    } catch (e) {
      console.warn("Error cleaning up video element:", e);
    }
    r = null;
  }
}
function L() {
  return `
        <div class="w-100 h-100 d-flex flex-column align-items-center justify-content-center">
            <div class="loading-status text-white mb-3">Initializing...</div>
            <div class="progress w-75">
                <div class="progress-bar" role="progressbar" style="width: 0%"></div>
            </div>
        </div>
    `;
}
function T() {
  const e = document.createElement("video");
  return e.style.display = "none", e.className = "w-100 h-100", e.style.objectFit = "contain", e.playsInline = !0, e.controls = !0, e.preload = "auto", e;
}
async function E(e) {
  try {
    e.innerHTML = "Initializing WebTorrent...", c || (c = new window.WebTorrent()), e.innerHTML = "WebTorrent initialized";
  } catch (l) {
    const f = l instanceof Error ? l.message : "Unknown error";
    throw e.innerHTML = `Error: ${f}`, l;
  }
}
async function M(e, l, f) {
  return console.log("Starting download..."), v(), c || (console.log("Client not initialized, setting up..."), c = new window.WebTorrent()), s && (console.log("Destroying existing torrent..."), s.destroy(), s = null), new Promise((b, d) => {
    try {
      const n = document.querySelector(l);
      if (!n)
        throw new Error(`Container element not found: ${l}`);
      n.innerHTML = L();
      const u = n.querySelector(".loading-status"), g = n.querySelector(".progress-bar");
      u && y(u), g && y(g);
      const h = {
        announce: [
          "wss://tracker.openwebtorrent.com",
          "wss://tracker.webtorrent.dev"
        ],
        maxWebConns: 4,
        strategy: "sequential"
      };
      c.add(f, h, (t) => {
        console.log("Torrent added, searching for video file..."), s = t;
        const p = t.files.find((o) => {
          const i = o.name.endsWith(".mp4") || o.name.endsWith(".webm") || o.name.endsWith(".mkv");
          return console.log("Checking file:", o.name, "isVideo:", i), i;
        });
        if (!p)
          throw new Error("No video file found in torrent");
        console.log("Video file found:", p.name);
        const a = T();
        r = a, n.appendChild(a), p.getBlobURL((o, i) => {
          if (o) {
            console.error("Error getting blob URL:", o), d(o);
            return;
          }
          if (!i) {
            d(new Error("No blob URL received"));
            return;
          }
          console.log("Got blob URL, setting up video..."), a.src = i, a.style.display = "block";
          const w = n.querySelector(".d-flex");
          w && n.removeChild(w), a.addEventListener("loadedmetadata", () => {
            console.log("Video metadata loaded"), t.progress > 0.1 && a.play().catch((m) => {
              console.warn("Could not auto-start video:", m);
            });
          });
        }), t.on("download", () => {
          const o = (t.progress * 100).toFixed(1), i = (t.downloadSpeed / (1024 * 1024)).toFixed(2), w = `Progress: ${o}% (${i} MB/s)`;
          u && (u.textContent = `Loading: ${o}%`), g && (g.style.width = `${o}%`), e.innerHTML = w, t.progress > 0.1 && r && r.paused && r.play().catch((m) => {
            console.warn("Could not start video:", m);
          });
        }), t.on("done", () => {
          console.log("Download complete"), e.innerHTML = "Download complete", b();
        }), t.on("error", (o) => {
          console.error("Torrent error:", o), d(o);
        }), t.on("warning", (o) => {
          o instanceof Error && !o.message.includes("tracker") && console.warn("Torrent warning:", o);
        });
      });
    } catch (n) {
      console.error("Error in startDownload:", n), d(n);
    }
  });
}
function C() {
  console.log("Stopping download..."), v(), s && (s.destroy(), s = null);
  const e = document.querySelector("#videoContainer");
  e && (e.innerHTML = ""), console.log("Download stopped, resources cleaned up");
}
export {
  E as initTorrentPlayer,
  M as startDownload,
  C as stopDownload
};
