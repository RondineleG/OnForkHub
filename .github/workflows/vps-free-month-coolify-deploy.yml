name: Build and Deploy to VPS

on:
  push:
    branches:
      - main
    paths:
      - 'src/Presentations/OnForkHub.Api/**'
      - 'src/Presentations/OnForkHub.Web/**'
      - 'docker-compose.yml'

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: onforkhub-api
  WEB_IMAGE_NAME: onforkhub-web
  DOCKER_BUILDKIT: 1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository owner
        run: |
          echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/Presentations/OnForkHub.Api/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.API_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/Presentations/OnForkHub.Web/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.WEB_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

          # Create deployment directory
          ssh $SSH_USERNAME@$SSH_HOST 'mkdir -p ~/onforkhub'

          # Create docker-compose.yml
          cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'
          services:
            api:
              image: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }}
              container_name: onforkhub-api
              restart: unless-stopped
              ports:
                - "9000:9000"
                - "9001:9001"
              environment:
                - ASPNETCORE_ENVIRONMENT=Production
                - ASPNETCORE_URLS=http://+:9000;https://+:9001
              networks:
                - onforkhub-network

            web:
              image: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }}
              container_name: onforkhub-web
              restart: unless-stopped
              ports:
                - "8000:8000"
                - "8001:8001"
              environment:
                - ASPNETCORE_ENVIRONMENT=Production
                - ASPNETCORE_URLS=http://+:8000;https://+:8001
              depends_on:
                - api
              networks:
                - onforkhub-network

          networks:
            onforkhub-network:
              name: onforkhub-network
          EOF

          # Copy docker-compose file to VPS
          scp docker-compose.prod.yml $SSH_USERNAME@$SSH_HOST:~/onforkhub/

          # Deploy on VPS
          ssh $SSH_USERNAME@$SSH_HOST 'cd ~/onforkhub && \
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin && \
            docker-compose -f docker-compose.prod.yml pull && \
            docker-compose -f docker-compose.prod.yml down && \
            docker-compose -f docker-compose.prod.yml up -d && \
            docker image prune -f'
