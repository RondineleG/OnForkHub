name: Build and Deploy to VPS

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - main
  push:
    branches:
      - dev
      - main

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: onforkhub-api
  WEB_IMAGE_NAME: onforkhub-web
  DOCKER_BUILDKIT: 1

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set lowercase repository owner
        run: |
          echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/Dockerfile.OnForkHub.Api
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.API_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/Dockerfile.OnForkHub.Web
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.WEB_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get current UTC time
        id: current-time
        if: failure()
        run: echo "time=$(date -u '+%d/%m/%Y %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Notify Build Failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            üîî *Build Failure Notification*
            
            üì¶ *Build Job Failed*
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
            Author: [${{ github.actor }}](https://github.com/${{ github.actor }})
            
            üèóÔ∏è *Build Details:*
            Repository: ${{ github.repository }}
            Workflow: ${{ github.workflow }}
            
            [View Build Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ‚è∞ ${{ steps.current-time.outputs.time }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}
          
      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          
      - name: Set scripts permissions locally
        run: |
          chmod +x .deploy/*.sh
          ls -la .deploy/
          
      - name: Create Remote Directory and Set Permissions
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -i ~/.ssh/deploy_key $SSH_USER@$SSH_HOST "
            mkdir -p ~/onforkhub-deploy &&
            chmod 755 ~/onforkhub-deploy
          "
          
      - name: Copy Deployment Files
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          scp -v -i ~/.ssh/deploy_key -r .deploy/* $SSH_USER@$SSH_HOST:~/onforkhub-deploy/
          
      - name: Set Execute Permissions on Remote
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -i ~/.ssh/deploy_key $SSH_USER@$SSH_HOST "
            chmod -R 755 ~/onforkhub-deploy/*.sh &&
            ls -la ~/onforkhub-deploy/
          "
          
      - name: Deploy Services
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -i ~/.ssh/deploy_key $SSH_USER@$SSH_HOST "
            cd ~/onforkhub-deploy &&
            echo 'Starting cleanup...' &&
            bash ./cleanup-services.sh &&
            echo 'Starting services...' &&
            bash ./start-services.sh '${{ secrets.CONTAINER_REGISTRY_TOKEN }}' '${{ github.actor }}'
          "
          
      - name: Verify Deployment Status
        if: success()
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -i ~/.ssh/deploy_key $SSH_USER@$SSH_HOST "
            cd ~/onforkhub-deploy &&
            echo '=== Container Status ===' &&
            docker ps &&
            echo '=== API Logs ===' &&
            docker logs onforkhub-api --tail 10 2>/dev/null || true &&
            echo '=== Web Logs ===' &&
            docker logs onforkhub-web --tail 10 2>/dev/null || true &&
            echo '=== Proxy Logs ===' &&
            docker logs reverse-proxy --tail 10 2>/dev/null || true
          "
          
      - name: Health Check
        if: success()
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        id: health-check
        run: |
          ssh -i ~/.ssh/deploy_key $SSH_USER@$SSH_HOST "
            cd ~/onforkhub-deploy &&
            echo '=== Health Check ===' &&
            API_HEALTH=\$(curl -sSf http://localhost:9000/health || echo 'failed') &&
            WEB_HEALTH=\$(curl -sSf http://localhost:80 || echo 'failed') &&
            echo "api_status=\$API_HEALTH" >> \$GITHUB_OUTPUT &&
            echo "web_status=\$WEB_HEALTH" >> \$GITHUB_OUTPUT
          "

      - name: Get current UTC time
        id: current-time
        run: echo "time=$(date -u '+%d/%m/%Y %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Cleanup on Failure
        if: failure()
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -i ~/.ssh/deploy_key $SSH_USER@$SSH_HOST "
            cd ~/onforkhub-deploy &&
            echo 'Deployment failed, cleaning up...' &&
            bash ./cleanup-services.sh
          "

      - name: Notify Deployment Status
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            üîî *Deployment Status Notification*
            
            üöÄ *Deployment ${{ job.status == 'success' && 'Succeeded' || 'Failed' }}*
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
            Author: [${{ github.actor }}](https://github.com/${{ github.actor }})
            
            üèóÔ∏è *Deployment Details:*
            Repository: ${{ github.repository }}
            Environment: Production
            Status: `${{ job.status }}`
            
            ${{ job.status == 'success' && format('‚úÖ *Services Health Status:*
            - API Health: `{0}`
            - Web Health: `{1}`
            - Containers: Running', 
            steps.health-check.outputs.api_status,
            steps.health-check.outputs.web_status) ||
            '‚ö†Ô∏è *Error Details:*
            The deployment process failed. Please check the logs for more information.' }}
            
            [View Deployment Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ‚è∞ ${{ steps.current-time.outputs.time }}
