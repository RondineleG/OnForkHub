name: CI/CD Pipeline - Build and Deploy

on:
  workflow_dispatch:
    inputs:
      branch_type:
        description: 'Branch type'
        required: true
        type: choice
        options:
          - feature/
          - bugfix/
          - hotfix/
          - release/
          - dev
          - main
          - uat
      branch_name:
        description: 'Branch name (for feature/bugfix/hotfix/release only)'
        required: false
        type: string
        default: ''
  push:
    branches:
      - dev
      - main
      - uat

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: onforkhub-api
  WEB_IMAGE_NAME: onforkhub-web
  DOCKER_BUILDKIT: 1

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      full_branch: ${{ steps.set_branch.outputs.full_branch }}
      environment: ${{ steps.set_env.outputs.environment }}

    steps:
      - name: Calculate full branch
        id: set_branch
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TYPE="${{ github.event.inputs.branch_type }}"
            NAME="${{ github.event.inputs.branch_name }}"

            if [[ "$TYPE" == "dev" || "$TYPE" == "main" || "$TYPE" == "uat" ]]; then
              echo "full_branch=$TYPE" >> $GITHUB_OUTPUT
            else
              if [[ -z "$NAME" ]]; then
                echo "Branch name required for $TYPE"
                exit 1
              fi
              TYPE_CLEAN=$(echo "$TYPE" | sed 's#/$##')
              echo "full_branch=${TYPE_CLEAN}/${NAME}" >> $GITHUB_OUTPUT
            fi
          else
            REF=${GITHUB_REF#refs/heads/}
            echo "full_branch=$REF" >> $GITHUB_OUTPUT
          fi

      - name: Set environment
        id: set_env
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

  build:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      FULL_BRANCH: ${{ needs.prepare.outputs.full_branch }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.FULL_BRANCH }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repo owner
        run: echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/Dockerfile.OnForkHub.Api
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.API_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Web
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/Dockerfile.OnForkHub.Web
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.WEB_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.environment }}

    env:
      ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
      FULL_BRANCH: ${{ needs.prepare.outputs.full_branch }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.FULL_BRANCH }}

      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          printf "%s" "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Transfer deployment files
        run: |
          scp -v -i ~/.ssh/deploy_key -r .deploy/* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/onforkhub-deploy/

      - name: Install services if missing
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            cd ~/onforkhub-deploy &&
            chmod +x install-services.sh &&
            if ! command -v docker &> /dev/null || ! docker compose version &> /dev/null; then
              export SUDO_PASSWORD='${{ secrets.SUDO_PASSWORD }}'
              bash ./install-services.sh
            fi
          "

      - name: Set permissions for scripts
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            cd ~/onforkhub-deploy &&
            chmod +x *.sh
          "

      - name: Execute deployment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            cd ~/onforkhub-deploy &&
            bash ./cleanup-services.sh &&
            export ASPNETCORE_ENVIRONMENT=${ENVIRONMENT} &&
            bash ./start-services.sh '${{ secrets.CONTAINER_REGISTRY_TOKEN }}' '${{ github.actor }}'
          "

      - name: Check containers
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            docker ps
          "