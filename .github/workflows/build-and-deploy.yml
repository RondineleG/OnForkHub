name: Build and Deploy to VPS with HTTPS

on:
  workflow_dispatch:
    inputs:
      branch_type:
        description: 'Select branch type'
        required: true
        type: choice
        options:
          - feature/
          - bugfix/
          - hotfix/
          - release/
          - dev
          - main
          - uat
      branch_name:
        description: 'Branch name (required for feature/bugfix/hotfix/release, ex: for feature/user-auth just type user-auth)'
        required: false
        type: string
        default: ''
  push:
    branches:
      - dev
      - main
      - uat

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: onforkhub-api
  WEB_IMAGE_NAME: onforkhub-web
  DOCKER_BUILDKIT: 1

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      full_branch: ${{ steps.set-branch.outputs.full_branch }}

    steps:
      - name: Set full branch name
        id: set-branch
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [[ "${{ github.event.inputs.branch_type }}" == "dev" || "${{ github.event.inputs.branch_type }}" == "main" || "${{ github.event.inputs.branch_type }}" == "uat" ]]; then
            FULL_BRANCH="${{ github.event.inputs.branch_type }}"
          else
            if [[ -z "${{ github.event.inputs.branch_name }}" ]]; then
              echo "‚ùå Branch name is required for ${{ github.event.inputs.branch_type }} branches"
              exit 1
            fi
            BRANCH_TYPE=$(echo "${{ github.event.inputs.branch_type }}" | sed 's#/$##')
            BRANCH_NAME=$(echo "${{ github.event.inputs.branch_name }}" | sed 's#^/##')
            FULL_BRANCH="${BRANCH_TYPE}/${BRANCH_NAME}"
          fi
          echo "FULL_BRANCH=${FULL_BRANCH}" >> $GITHUB_ENV
          echo "full_branch=${FULL_BRANCH}" >> $GITHUB_OUTPUT
          echo "‚úÖ Full branch set to: ${FULL_BRANCH}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && steps.set-branch.outputs.full_branch || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository owner
        run: echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/Dockerfile.OnForkHub.Api
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.API_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/Dockerfile.OnForkHub.Web
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.WEB_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get current UTC time
        id: current-time
        if: failure()
        run: echo "time=$(date -u '+%d/%m/%Y %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Notify Build Failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            üîî *Build Failure Notification*

            üì¶ *Build Job Failed*
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
            Author: [${{ github.actor }}](https://github.com/${{ github.actor }})

            üèóÔ∏è *Build Details:*
            Repository: ${{ github.repository }}
            Workflow: ${{ github.workflow }}

            [View Build Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ‚è∞ ${{ steps.current-time.outputs.time }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && needs.build.outputs.full_branch || github.ref }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

          cat >> ~/.ssh/config << 'EOF'
          Host deploy-server
            HostName ${{ secrets.SSH_HOST }}
            User ${{ secrets.SSH_USERNAME }}
            IdentityFile ~/.ssh/deploy_key
            ServerAliveInterval 30
            ServerAliveCountMax 10
            ConnectTimeout 10
          EOF

          echo "‚úÖ SSH configured successfully"

      - name: Test SSH Connection
        run: |
          ssh deploy-server "echo '‚úÖ SSH connection successful'"

      - name: Check SSL Certificate Status
        run: |
          ssh deploy-server "
            echo 'üîê Checking SSL certificate status...'
            if [ -f '/etc/ssl/zerossl/fullchain.crt' ]; then
              echo '‚úÖ SSL certificate found'
              openssl x509 -in /etc/ssl/zerossl/fullchain.crt -subject -dates -noout
              if openssl x509 -in /etc/ssl/zerossl/fullchain.crt -checkend 86400 -noout; then
                echo '‚úÖ Certificate is valid for more than 24 hours'
              else
                echo '‚ö†Ô∏è Certificate expires within 24 hours!'
              fi
            else
              echo '‚ùå SSL certificate not found'
              exit 1
            fi
          "

      - name: Copy Deployment Files
        run: |
          scp -r .deploy/* deploy-server:~/onforkhub-deploy/

      - name: Install Services if Needed
        run: |
          ssh deploy-server "
            cd ~/onforkhub-deploy
            chmod +x install-services.sh
            if ! command -v docker &> /dev/null || ! docker compose version &> /dev/null; then
              echo 'Installing Docker and dependencies...'
              export SUDO_PASSWORD='${{ secrets.SUDO_PASSWORD }}'
              timeout 300 bash ./install-services.sh
            else
              echo 'Docker already installed'
              docker --version
              docker compose version
            fi
          "

      - name: Cleanup Previous Deployment
        run: |
          ssh deploy-server "
            cd ~/onforkhub-deploy
            chmod +x cleanup-services.sh
            echo 'üßπ Cleaning up previous deployment...'
            timeout 120 bash ./cleanup-services.sh || echo 'Cleanup completed or timed out'
          "

      - name: Update Docker Compose Configuration
        run: |
          ssh deploy-server "
            cd ~/onforkhub-deploy
            GITHUB_USERNAME_LOWER=\$(echo '${{ github.actor }}' | tr '[:upper:]' '[:lower:]')
            echo 'üîÑ Using lowercase username: \$GITHUB_USERNAME_LOWER'

            # Update docker-compose.yml with correct image names
            sed -i \"s|ghcr.io/.*/onforkhub-api:latest|ghcr.io/\$GITHUB_USERNAME_LOWER/onforkhub-api:latest|g\" docker-compose.yml
            sed -i \"s|ghcr.io/.*/onforkhub-web:latest|ghcr.io/\$GITHUB_USERNAME_LOWER/onforkhub-web:latest|g\" docker-compose.yml

            # Remove obsolete version from docker-compose.yml
            sed -i '/^version:/d' docker-compose.yml

            echo '‚úÖ Docker compose updated'
            grep 'image:' docker-compose.yml || echo 'No image lines found'
          "

      - name: Start Deployment
        run: |
          ssh deploy-server "
            cd ~/onforkhub-deploy
            chmod +x start-services.sh
            export ASPNETCORE_ENVIRONMENT='${{ github.ref_name == 'main' && 'Production' || 'Development' }}'
            echo 'üöÄ Starting deployment...'
            timeout 600 bash ./start-services.sh '${{ secrets.CONTAINER_REGISTRY_TOKEN }}' '${{ github.actor }}' || {
              echo '‚ùå Deployment timed out or failed'
              echo 'Container status:'
              docker ps -a || true
              exit 1
            }
          "

      - name: Monitor Deployment Progress
        run: |
          ssh deploy-server "
            cd ~/onforkhub-deploy
            echo '‚è≥ Monitoring deployment progress...'

            for i in {1..20}; do
              echo \"--- Check \$i/20 ---\"
              docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'

              # Check if containers are running
              API_STATUS=\$(docker ps --filter 'name=onforkhub-api' --format '{{.Status}}' | head -1)
              WEB_STATUS=\$(docker ps --filter 'name=onforkhub-web' --format '{{.Status}}' | head -1)
              PROXY_STATUS=\$(docker ps --filter 'name=reverse-proxy' --format '{{.Status}}' | head -1)

              echo \"API Status: \$API_STATUS\"
              echo \"Web Status: \$WEB_STATUS\"
              echo \"Proxy Status: \$PROXY_STATUS\"

              # If all containers are running, break
              if [[ \"\$API_STATUS\" == *\"Up\"* && \"\$WEB_STATUS\" == *\"Up\"* && \"\$PROXY_STATUS\" == *\"Up\"* ]]; then
                echo '‚úÖ All containers are running'
                break
              fi

              # If any container has exited, show logs and exit
              if [[ \"\$API_STATUS\" == *\"Exited\"* || \"\$WEB_STATUS\" == *\"Exited\"* ]]; then
                echo '‚ùå Some containers have exited'
                docker logs onforkhub-api --tail 20 2>/dev/null || true
                docker logs onforkhub-web --tail 20 2>/dev/null || true
                exit 1
              fi

              sleep 15
            done
          "

      - name: Test Services
        run: |
          ssh deploy-server "
            echo 'üß™ Testing services...'

            # Test API health
            echo 'Testing API health endpoint...'
            for i in {1..5}; do
              if curl -f -m 10 -k https://172.245.152.43:9443/health 2>/dev/null; then
                echo '‚úÖ API health check passed'
                break
              elif curl -f -m 10 -k https://172.245.152.43:9443/ 2>/dev/null; then
                echo '‚úÖ API root endpoint accessible'
                break
              else
                echo \"API test attempt \$i/5 failed, retrying...\"
                sleep 10
              fi
            done

            # Test Web
            echo 'Testing Web endpoint...'
            for i in {1..5}; do
              if curl -f -m 10 -k https://172.245.152.43/ 2>/dev/null; then
                echo '‚úÖ Web endpoint accessible'
                break
              else
                echo \"Web test attempt \$i/5 failed, retrying...\"
                sleep 10
              fi
            done

            echo 'üìã Final status:'
            docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
          "

      - name: Show Deployment Logs
        if: always()
        run: |
          ssh deploy-server "
            echo 'üìù Deployment logs:'
            echo '=== API Logs ==='
            docker logs onforkhub-api --tail 30 2>/dev/null || echo 'API container not found'
            echo '=== Web Logs ==='
            docker logs onforkhub-web --tail 30 2>/dev/null || echo 'Web container not found'
            echo '=== Reverse Proxy Logs ==='
            docker logs reverse-proxy --tail 30 2>/dev/null || echo 'Reverse proxy container not found'
          "

      - name: Get current UTC time
        id: current-time
        run: echo "time=$(date -u '+%d/%m/%Y %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Notify Successful Deployment
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            üéâ *HTTPS Deployment Successful*

            üîê *Secure Deployment Completed*
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
            Environment: ${{ github.ref_name == 'main' && 'Production' || 'Development' }}

            üåê *HTTPS Access URLs:*
            ‚Ä¢ Web: https://172.245.152.43
            ‚Ä¢ API: https://172.245.152.43:9443

            ‚è∞ ${{ steps.current-time.outputs.time }}

      - name: Notify Deployment Failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            üö® *HTTPS Deployment Failed*

            ‚ùå *Deployment Error*
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`

            [View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ‚è∞ ${{ steps.current-time.outputs.time }}
