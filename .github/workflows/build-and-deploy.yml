name: Build and Deploy to VPS with HTTPS

on:
  workflow_dispatch:
    inputs:
      branch_type:
        description: 'Branch type'
        required: true
        type: choice
        options:
          - feature/
          - bugfix/
          - hotfix/
          - release/
          - dev
          - main
          - uat
      branch_name:
        description: 'Branch name (required for feature/bugfix/hotfix/release, ex: for feature/user-auth just type user-auth)'
        required: false
        type: string
        default: ''
  push:
    branches:
      - dev
      - main
      - uat

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: onforkhub-api
  WEB_IMAGE_NAME: onforkhub-web
  DOCKER_BUILDKIT: 1

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      full_branch: ${{ steps.set_branch.outputs.full_branch }}
      environment: ${{ steps.set_env.outputs.environment }}

    steps:
      - name: Calculate full branch
        id: set_branch
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TYPE="${{ github.event.inputs.branch_type }}"
            NAME="${{ github.event.inputs.branch_name }}"

            if [[ "$TYPE" == "dev" || "$TYPE" == "main" || "$TYPE" == "uat" ]]; then
              echo "full_branch=$TYPE" >> $GITHUB_OUTPUT
            else
              if [[ -z "$NAME" ]]; then
                echo "Branch name required for $TYPE"
                exit 1
              fi
              TYPE_CLEAN=$(echo "$TYPE" | sed 's#/$##')
              echo "full_branch=${TYPE_CLEAN}/${NAME}" >> $GITHUB_OUTPUT
            fi
          else
            REF=${GITHUB_REF#refs/heads/}
            echo "full_branch=$REF" >> $GITHUB_OUTPUT
          fi

      - name: Set environment
        id: set_env
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

  build:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      FULL_BRANCH: ${{ needs.prepare.outputs.full_branch }}

    steps:
      - name: Set full branch name
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [[ "${{ github.event.inputs.branch_type }}" == "dev" || "${{ github.event.inputs.branch_type }}" == "main" || "${{ github.event.inputs.branch_type }}" == "uat" ]]; then
            echo "FULL_BRANCH=${{ github.event.inputs.branch_type }}" >> $GITHUB_ENV
          else
            if [[ -z "${{ github.event.inputs.branch_name }}" ]]; then
              echo "‚ùå Branch name is required for ${{ github.event.inputs.branch_type }} branches"
              exit 1
            fi
            BRANCH_TYPE=$(echo "${{ github.event.inputs.branch_type }}" | sed 's#/$##')
            BRANCH_NAME=$(echo "${{ github.event.inputs.branch_name }}" | sed 's#^/##')
            echo "FULL_BRANCH=${BRANCH_TYPE}/${BRANCH_NAME}" >> $GITHUB_ENV
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.FULL_BRANCH }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repo owner
        run: echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/Dockerfile.OnForkHub.Api
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.API_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Web
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/Dockerfile.OnForkHub.Web
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.WEB_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get current UTC time
        id: current-time
        if: failure()
        run: echo "time=$(date -u '+%d/%m/%Y %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Notify Build Failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            üîî *Build Failure Notification*

            üì¶ *Build Job Failed*
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
            Author: [${{ github.actor }}](https://github.com/${{ github.actor }})

            üèóÔ∏è *Build Details:*
            Repository: ${{ github.repository }}
            Workflow: ${{ github.workflow }}

            [View Build Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ‚è∞ ${{ steps.current-time.outputs.time }}

  deploy:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.environment }}

    env:
      ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
      FULL_BRANCH: ${{ needs.prepare.outputs.full_branch }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.FULL_BRANCH }}

      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Check SSL Certificate Status
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -i ~/.ssh/deploy_key $SSH_USER@$SSH_HOST "
            echo 'üîê Checking SSL certificate status...'
            if [ -f '/etc/ssl/zerossl/fullchain.crt' ]; then
              echo '‚úÖ SSL certificate found'
              echo 'Certificate details:'
              openssl x509 -in /etc/ssl/zerossl/fullchain.crt -subject -dates -noout
              if openssl x509 -in /etc/ssl/zerossl/fullchain.crt -checkend 86400 -noout; then
                echo '‚úÖ Certificate is valid for more than 24 hours'
              else
                echo '‚ö†Ô∏è Certificate expires within 24 hours!'
              fi
            else
              echo '‚ùå SSL certificate not found at /etc/ssl/zerossl/fullchain.crt'
              echo 'Please install SSL certificates before deployment'
              exit 1
            fi
          "

      - name: Check and Install Dependencies
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -i ~/.ssh/deploy_key $SSH_USER@$SSH_HOST "
            if ! command -v docker &> /dev/null || ! command -v docker compose &> /dev/null; then
              echo 'Installing dependencies...'
              mkdir -p ~/onforkhub-deploy
            fi
          "

      - name: Copy Deployment Files
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            cd ~/onforkhub-deploy &&
            chmod +x install-services.sh &&
            if ! command -v docker &> /dev/null || ! docker compose version &> /dev/null; then
              echo 'Installing Docker and dependencies...'
              export SUDO_PASSWORD='$SUDO_PASSWORD'
              bash ./install-services.sh
              sudo systemctl status docker --no-pager || true
            else
              echo 'Docker and dependencies already installed'
              docker --version
              docker compose version
            fi
          "

      - name: Set Execute Permissions and Verify
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            cd ~/onforkhub-deploy &&
            chmod +x *.sh &&
            ls -la *.sh &&
            test -x cleanup-services.sh && echo '‚úÖ cleanup-services.sh is executable' || echo '‚ùå cleanup-services.sh is NOT executable' &&
            test -x start-services.sh && echo '‚úÖ start-services.sh is executable' || echo '‚ùå start-services.sh is NOT executable'
          "

      - name: Deploy Services with HTTPS
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          ENVIRONMENT: ${{ github.ref_name == 'main' && 'Production' || 'Development' }}
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            cd ~/onforkhub-deploy &&
            echo 'üßπ Starting cleanup...' &&
            bash ./cleanup-services.sh &&
            echo 'üöÄ Starting services in $ENVIRONMENT environment with HTTPS...' &&
            export ASPNETCORE_ENVIRONMENT=$ENVIRONMENT &&
            bash ./start-services.sh '${{ secrets.CONTAINER_REGISTRY_TOKEN }}' '${{ github.actor }}'
          "

      - name: Verify HTTPS Deployment
        if: success()
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -i ~/.ssh/deploy_key $SSH_USER@$SSH_HOST "
            cd ~/onforkhub-deploy &&
            echo 'üìã Container status:' &&
            docker ps &&
            echo 'üìù Container logs:' &&
            docker logs onforkhub-api --tail 10 2>/dev/null || true &&
            docker logs onforkhub-web --tail 10 2>/dev/null || true &&
            docker logs reverse-proxy --tail 10 2>/dev/null || true &&
            echo 'üåê Testing HTTPS endpoints...' &&
            echo 'Testing Web HTTPS:' &&
            curl -k -s -o /dev/null -w 'HTTP Status: %{http_code}\n' https://172.245.152.43 || echo 'Web test failed' &&
            echo 'Testing API HTTPS:' &&
            curl -k -s -o /dev/null -w 'HTTP Status: %{http_code}\n' https://172.245.152.43:9443/health || echo 'API test failed'
          "

      - name: Get current UTC time
        id: current-time
        run: echo "time=$(date -u '+%d/%m/%Y %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Notify Successful HTTPS Deployment
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            üéâ *HTTPS Deployment Successful*

            üîê *Secure Deployment Completed*
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
            Environment: ${{ github.ref_name == 'main' && 'Production' || 'Development' }}

            üåê *HTTPS Access URLs:*
            ‚Ä¢ Web: https://172.245.152.43
            ‚Ä¢ API: https://172.245.152.43:9443

            ‚è∞ ${{ steps.current-time.outputs.time }}

      - name: Notify Deployment Failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            üö® *HTTPS Deployment Failed*

            ‚ùå *Deployment Error*
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`

            [View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ‚è∞ ${{ steps.current-time.outputs.time }}
