#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

"$(dirname "$0")/commit-msg-qodana" "$1" || exit $?

# commit_message=$(cat "$1")
# current_branch=$(git symbolic-ref --short HEAD)

# if echo "$commit_message" | grep -qE "^Merge"; then
#     if ! echo "$commit_message" | grep -qE "^merge: "; then
#         echo "$commit_message" | sed 's/^Merge/merge:/' > "$1"
#         commit_message=$(cat "$1")
#     fi
# fi

# commit_pattern="^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert|merge)(\([a-z0-9-]+\))?(!)?: .+"

# if ! echo "$commit_message" | grep -qE "$commit_pattern"; then
#     echo "❌ Invalid commit message format!"
#     echo "The commit message should follow the Conventional Commits format:"
#     echo "  <type>[optional scope]: <description>"
#     echo ""
#     echo "Examples:"
#     echo "  feat: add new feature"
#     echo "  feat(api): add new endpoint"
#     echo "  fix(ui): resolve button alignment"
#     echo "  feat!: breaking change in API"
#     echo "  merge: branch 'feature/xyz' into main"
#     echo ""
#     echo "Allowed types:"
#     echo "  feat     ➡️ New feature (correlates with MINOR in SemVer)"
#     echo "  fix      ➡️ Bug fix (correlates with PATCH in SemVer)"
#     echo "  docs     ➡️ Documentation only changes"
#     echo "  style    ➡️ Changes that do not affect the meaning of the code"
#     echo "  refactor ➡️ Code change that neither fixes a bug nor adds a feature"
#     echo "  perf     ➡️ Code change that improves performance"
#     echo "  test     ➡️ Adding missing tests or correcting existing tests"
#     echo "  build    ➡️ Changes that affect the build system or external dependencies"
#     echo "  ci       ➡️ Changes to CI configuration files and scripts"
#     echo "  chore    ➡️ Other changes that don't modify src or test files"
#     echo "  revert   ➡️ Reverts a previous commit"
#     echo "  merge    ➡️ Merge commits"
#     exit 1
# fi

# case "$current_branch" in
#     feature/*)
#         valid_types="^(feat|refactor|fix|test|docs|style|merge).*"
#         ;;
#     hotfix/*)
#         valid_types="^(fix|hotfix|perf|merge).*"
#         ;;
#     bugfix/*)
#         valid_types="^(fix|bugfix|perf|merge).*"
#         ;;
#     release/*)
#         valid_types="^(release|chore|docs|merge).*"
#         ;;
#     *)
#         exit 0
#         ;;
# esac

# if ! echo "$commit_message" | grep -qE "$valid_types"; then
#     echo "❌ Invalid commit type for branch '$current_branch'!"
#     echo "For this branch type, commit messages must start with one of the following types:"
#     case "$current_branch" in
#         feature/*)
#             echo "  - feat:     ➡️ For new features"
#             echo "  - refactor: ➡️ For code refactoring"
#             echo "  - fix:      ➡️ For bug fixes"
#             echo "  - test:     ➡️ For adding or updating tests"
#             echo "  - docs:     ➡️ For documentation updates"
#             echo "  - style:    ➡️ For code style changes"
#             echo "  - merge:    ➡️ For merge commits"
#             ;;
#         hotfix/*)
#             echo "  - fix:      ➡️ For bug fixes"
#             echo "  - hotfix:   ➡️ For critical fixes"
#             echo "  - perf:     ➡️ For performance improvements"
#             echo "  - merge:    ➡️ For merge commits"
#             ;;
#         bugfix/*)
#             echo "  - fix:      ➡️ For bug fixes"
#             echo "  - bugfix:   ➡️ For bug fixes"
#             echo "  - perf:     ➡️ For performance improvements"
#             echo "  - merge:    ➡️ For merge commits"
#             ;;
#         release/*)
#             echo "  - release:  ➡️ For release related changes"
#             echo "  - chore:    ➡️ For maintenance tasks"
#             echo "  - docs:     ➡️ For documentation updates"
#             echo "  - merge:    ➡️ For merge commits"
#             ;;
#     esac
#     exit 1
# fi

# echo "✅ Commit message is valid and follows Conventional Commits format."